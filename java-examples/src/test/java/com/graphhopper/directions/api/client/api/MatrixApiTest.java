/*
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.graphhopper.directions.api.client.api;

import com.graphhopper.directions.api.client.ApiException;
import com.graphhopper.directions.api.client.model.MatrixRequest;
import com.graphhopper.directions.api.client.model.MatrixResponse;
import com.graphhopper.directions.api.client.model.VehicleProfileId;
import com.graphhopper.directions.api.examples.GHApiUtil;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;

/**
 * API tests for MatrixApi
 */
@Ignore
public class
MatrixApiTest {

    private final MatrixApi api = new MatrixApi();

    @Before
    public void setUp() {
        api.setApiClient(GHApiUtil.createClient());
    }

    /**
     * Matrix API
     * <p>
     * The Matrix API is part of the GraphHopper Directions API and with this API you can calculate many-to-many distances, times or routes a lot more efficient than calling the Routing API multiple times. In the Routing API we support multiple points, so called &#39;via points&#39;, which results in one route being calculated. The Matrix API results in NxM routes or more precise NxM weights, distances or times being calculated but is a lot faster compared to NxM single requests. The most simple example is a tourist trying to decide which pizza is close to him instead of using beeline distance she can calculate a 1x4 matrix. Or a delivery service in the need of often big NxN matrices to solve vehicle routing problems. E.g. the GraphHopper Route Optimization API uses the Matrix API under the hood to achieve this.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void matrixGetTest() throws ApiException {
        List<String> point = Arrays.asList("49.932707,11.588051", "50.241935,10.747375", "50.118817,11.983337");
        List<String> fromPoint = null;
        List<String> toPoint = null;
        List<String> pointHints = null;
        List<String> fromPointHints = null;
        List<String> toPointHints = null;
        List<String> outArray = Arrays.asList("weights", "distances", "times");
        MatrixResponse response = api.getMatrix(point, fromPoint, toPoint, pointHints, fromPointHints, toPointHints, null,
                outArray, VehicleProfileId.CAR, false);
        assertEquals(3, response.getDistances().size());

    }

    /**
     * Matrix API Post
     * <p>
     * The GET request has an URL length limitation, which hurts for many locations per request. In those cases use a HTTP POST request with JSON data as input. The only parameter in the URL will be the key which stays in the URL. Both request scenarios are identically except that all singular parameter names are named as their plural for a POST request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void matrixPostTest() throws ApiException {
        MatrixRequest body = new MatrixRequest();
        List<List<Double>> pointList = new ArrayList<>();
        pointList.add(Arrays.asList(new Double[]{11.588051, 49.932707}));
        pointList.add(Arrays.asList(new Double[]{10.747375, 50.241935}));
        pointList.add(Arrays.asList(new Double[]{11.983337, 50.118817}));
        body.setFromPoints(pointList);
        body.setToPoints(pointList);
        body.setOutArrays(Arrays.asList("weights", "distances", "times"));
        MatrixResponse response = api.postMatrix(body);
        assertEquals(3, response.getDistances().size());
    }

    @Test
    public void differentFromsAndTos() throws ApiException {
        MatrixRequest request = new MatrixRequest()
                .fromPoints(Arrays.asList(Arrays.asList(2.311129, 48.844055), Arrays.asList(2.351729, 48.836792), Arrays.asList(2.366178, 48.884376)))
                .toPoints(Arrays.asList(Arrays.asList(2.325425, 48.896827), Arrays.asList(2.212104, 48.893765)))
                .outArrays(Arrays.asList("times", "distances"))
                .vehicle("car");
        MatrixResponse response = new MatrixApi().postMatrix(request);
        assertEquals(28, response.getTimes().get(0).get(1).intValue() / 60, 2);
    }
}
