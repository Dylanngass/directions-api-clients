//
// IsochroneAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class IsochroneAPI {
    /**
     * enum for parameter weighting
     */
    public enum Weighting_getIsochrone: String { 
        case fastest = "fastest"
        case shortest = "shortest"
    }

    /**
     Isochrone Request
     - parameter point: (query) Specify the start coordinate      - parameter timeLimit: (query) Specify which time the vehicle should travel. In seconds. (optional)     - parameter distanceLimit: (query) Specify which distance the vehicle should travel. In meters. (optional)     - parameter vehicle: (query) The vehicle profile for which the route should be calculated.  (optional)     - parameter buckets: (query) For how many subintervals an additional polygon should be calculated. (optional)     - parameter reverseFlow: (query) If &#x60;false&#x60; the flow goes from point to the polygon, if &#x60;true&#x60; the flow goes from the polygon \&quot;inside\&quot; to the point. Example use case for &#x60;false&#x60;&amp;#58; *How many potential customer can be reached within 30min travel time from your store* vs. &#x60;true&#x60;&amp;#58; *How many customers can reach your store within 30min travel time.*  (optional)     - parameter weighting: (query) Use &#x60;\&quot;shortest\&quot;&#x60; to get an isodistance line instead of an isochrone. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIsochrone(point: String, timeLimit: Int? = nil, distanceLimit: Int? = nil, vehicle: VehicleProfileId? = nil, buckets: Int? = nil, reverseFlow: Bool? = nil, weighting: Weighting_getIsochrone? = nil, completion: @escaping ((_ data: IsochroneResponse?,_ error: Error?) -> Void)) {
        getIsochroneWithRequestBuilder(point: point, timeLimit: timeLimit, distanceLimit: distanceLimit, vehicle: vehicle, buckets: buckets, reverseFlow: reverseFlow, weighting: weighting).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Isochrone Request
     - GET /isochrone
     - ### Example You can get an example response via:  ``` curl \"https://graphhopper.com/api/1/isochrone?point=51.131108,12.414551&key=[YOUR_KEY]\" ```  Don't forget to replace the placeholder with your own key.  ### Introduction ![Isochrone screenshot](./img/isochrone-example.png)  An isochrone of a location is ''a line connecting points at which a vehicle arrives at the same time'', see Wikipedia. With the same API you can also calculate isodistances, just use the parameter distance_limit instead of time_limit`.  ### Use Cases Some possible areas in which this API may be useful to you:  - real estate analysis - realtors - vehicle scheduling - geomarketing - reach of electric vehicles - transport planning - logistics (distribution and retail network planning)  ### API Clients and Examples See the [clients](#section/API-Clients) section in the main documentation, and [live examples](https://graphhopper.com/api/1/examples/#isochrone). 
     - API Key:
       - type: apiKey key (QUERY)
       - name: api_key
     - examples: [{contentType=application/json, example={
  "polygons" : [ {
    "properties" : {
      "bucket" : 0
    },
    "type" : "Feature",
    "geometry" : {
      "type" : "Polygon",
      "coordinates" : [ [ 13.351851, 52.51345 ], [ 13.350402, 52.516949 ], [ 13.352598, 52.522252 ], [ 13.351851, 52.51345 ] ]
    }
  } ]
}}]
     - parameter point: (query) Specify the start coordinate      - parameter timeLimit: (query) Specify which time the vehicle should travel. In seconds. (optional)     - parameter distanceLimit: (query) Specify which distance the vehicle should travel. In meters. (optional)     - parameter vehicle: (query) The vehicle profile for which the route should be calculated.  (optional)     - parameter buckets: (query) For how many subintervals an additional polygon should be calculated. (optional)     - parameter reverseFlow: (query) If &#x60;false&#x60; the flow goes from point to the polygon, if &#x60;true&#x60; the flow goes from the polygon \&quot;inside\&quot; to the point. Example use case for &#x60;false&#x60;&amp;#58; *How many potential customer can be reached within 30min travel time from your store* vs. &#x60;true&#x60;&amp;#58; *How many customers can reach your store within 30min travel time.*  (optional)     - parameter weighting: (query) Use &#x60;\&quot;shortest\&quot;&#x60; to get an isodistance line instead of an isochrone. (optional)

     - returns: RequestBuilder<IsochroneResponse> 
     */
    open class func getIsochroneWithRequestBuilder(point: String, timeLimit: Int? = nil, distanceLimit: Int? = nil, vehicle: VehicleProfileId? = nil, buckets: Int? = nil, reverseFlow: Bool? = nil, weighting: Weighting_getIsochrone? = nil) -> RequestBuilder<IsochroneResponse> {
        let path = "/isochrone"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "point": point, 
                        "time_limit": timeLimit?.encodeToJSON(), 
                        "distance_limit": distanceLimit?.encodeToJSON(), 
                        "vehicle": vehicle, 
                        "buckets": buckets?.encodeToJSON(), 
                        "reverse_flow": reverseFlow, 
                        "weighting": weighting?.rawValue
        ])

        let requestBuilder: RequestBuilder<IsochroneResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
