//
// MapMatchingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class MapMatchingAPI {
    /**
     Map-match a GPX file

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGPX(completion: @escaping ((_ data: RouteResponse?,_ error: Error?) -> Void)) {
        postGPXWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Map-match a GPX file
     - POST /match
     - ### Example You get an example response for a GPX via:  ``` curl -XPOST -H \"Content-Type: application/gpx+xml\" \"https://graphhopper.com/api/1/match?vehicle=car&key=[YOUR_KEY]\" --data @/path/to/some.gpx ```  ### Introduction ![Map Matching screenshot](./img/map-matching-example.gif)  The Map Matching is part of the GraphHopper Directions API and with this API you can snap measured GPS points typically as GPX files to a digital road network to e.g. clean data or attach certain data like elevation or turn instructions to it. Read more at Wikipedia.  In the example screenshot above and demo you see the Map Matching in action where the black line is the GPS track and the green one is matched result.  Most of the times, you can simply POST a GPX file, but some of the request parameters of the [Routing](#tag/Routing-API) apply here, too.  ### API Clients and Examples See the [clients](#section/API-Clients) section in the main documentation, and [live examples](https://graphhopper.com/api/1/examples/#map-matching).  ### Limits and Counts The cost for one request depends on the number of GPS location and is documented [here](https://graphhopper.com/api/1/docs/FAQ/).  One request should not exceed the Map Matching location limit depending on the package, see the pricing in our dashboard. 
     - API Key:
       - type: apiKey key (QUERY)
       - name: api_key
     - responseHeaders: [X-RateLimit-Limit(Int), X-RateLimit-Remaining(Int), X-RateLimit-Reset(Int), X-RateLimit-Credits(Int)]
     - responseHeaders: [X-RateLimit-Limit(Int), X-RateLimit-Remaining(Int), X-RateLimit-Reset(Int), X-RateLimit-Credits(Int)]
     - responseHeaders: [X-RateLimit-Limit(Int), X-RateLimit-Remaining(Int), X-RateLimit-Reset(Int), X-RateLimit-Credits(Int)]
     - responseHeaders: [X-RateLimit-Limit(Int), X-RateLimit-Remaining(Int), X-RateLimit-Reset(Int), X-RateLimit-Credits(Int)]
     - examples: [{contentType=application/json, example={
  "info" : {
    "copyrights" : [ "GraphHopper", "OpenStreetMap contributors" ],
    "took" : 15
  },
  "paths" : [ {
    "bbox" : [ 13.362853824187303, 52.469481955531585, 13.385836736460217, 52.473849308838446 ],
    "distance" : 2138.3027624572337,
    "instructions" : [ {
      "distance" : 1268.519329705091,
      "interval" : [ 0, 10 ],
      "sign" : 0,
      "text" : "Geradeaus auf A 100",
      "time" : 65237
    }, {
      "distance" : 379.74399999999997,
      "interval" : [ 10, 11 ],
      "sign" : 0,
      "text" : "Geradeaus auf Strasse",
      "time" : 24855
    }, {
      "distance" : 16.451,
      "interval" : [ 11, 11 ],
      "sign" : 0,
      "text" : "Geradeaus auf Tempelhofer Damm",
      "time" : 1316
    }, {
      "distance" : 473.58843275214315,
      "interval" : [ 11, 12 ],
      "sign" : -2,
      "text" : "Links abbiegen auf Tempelhofer Damm, B 96",
      "time" : 37882
    }, {
      "distance" : 0,
      "interval" : [ 12, 12 ],
      "sign" : 4,
      "text" : "Ziel erreicht!",
      "time" : 0
    } ],
    "points" : "oxg_Iy|ppAl@wCdE}LfFsN|@_Ej@eEtAaMh@sGVuDNcDb@{PFyGdAi]FoC?q@sXQ_@?",
    "points_encoded" : true,
    "details" : {
      "street_name" : [ [ 0, 1, "Rue Principale" ], [ 1, 13, "D19E" ], [ 13, 18, "D19" ], ".." ],
      "toll" : [ [ 0, 25, "no" ], [ 25, 146, "all" ], [ 146, 158, "no" ], [ 158, 204, "all" ], ".." ],
      "max_speed" : [ [ 0, 25, -1 ], [ 25, 98, 130 ], [ 98, 113, 90 ], [ 113, 140, 130 ], [ 140, 143, 110 ], ".." ]
    },
    "time" : 129290
  } ]
}}]

     - returns: RequestBuilder<RouteResponse> 
     */
    open class func postGPXWithRequestBuilder() -> RequestBuilder<RouteResponse> {
        let path = "/match"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RouteResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
