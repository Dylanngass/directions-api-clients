//
// Vehicle.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public struct Vehicle: Codable {


    /** Specifies the id of the vehicle. Ids need to be unique, thus if there two vehicles with the same id, an exception is thrown. */
    public var vehicleId: String

    /** The type_id refers to specified vehicle type (see vehicle types). If it is omitted a default type will be used. */
    public var typeId: String?

    public var startAddress: Address

    public var endAddress: Address?

    public var _break: AnyOfVehicleBreak?

    /** If it is false, the algorithm decides where to end the vehicle route. It ends in one of your customers&#x27; locations. The end is chosen such that it contributes to the overall objective function, e.g. min transport_time. If it is true, you can either specify a specific end location (which is then regarded as end depot) or you can leave it and the driver returns to its start location. */
    public var returnToDepot: Bool?

    /** Earliest start of vehicle in seconds. It is recommended to use the unix timestamp. */
    public var earliestStart: Int64?

    /** Latest end of vehicle in seconds, i.e. the time the vehicle needs to be at its end location at latest. */
    public var latestEnd: Int64?

    /** Array of skills, i.e. array of string (not case sensitive). */
    public var skills: [String]?

    /** Specifies the maximum distance a vehicle can go. */
    public var maxDistance: Int64?

    /** Specifies the maximum drive time a vehicle/driver can go, i.e. the maximum time on the road (service and waiting times are not included here) */
    public var maxDrivingTime: Int64?

    /** Specifies the maximum number of jobs a vehicle can load. */
    public var maxJobs: Int?

    /** Specifies the maximum number of activities a vehicle can conduct. */
    public var maxActivities: Int?

    /** Indicates whether a vehicle should be moved even though it has not been assigned any jobs. */
    public var moveToEndAddress: Bool?
    public init(vehicleId: String, typeId: String?, startAddress: Address, endAddress: Address?, _break: AnyOfVehicleBreak?, returnToDepot: Bool?, earliestStart: Int64?, latestEnd: Int64?, skills: [String]?, maxDistance: Int64?, maxDrivingTime: Int64?, maxJobs: Int?, maxActivities: Int?, moveToEndAddress: Bool?) { 
        self.vehicleId = vehicleId
        self.typeId = typeId
        self.startAddress = startAddress
        self.endAddress = endAddress
        self._break = _break
        self.returnToDepot = returnToDepot
        self.earliestStart = earliestStart
        self.latestEnd = latestEnd
        self.skills = skills
        self.maxDistance = maxDistance
        self.maxDrivingTime = maxDrivingTime
        self.maxJobs = maxJobs
        self.maxActivities = maxActivities
        self.moveToEndAddress = moveToEndAddress
    }
    public enum CodingKeys: String, CodingKey { 
        case vehicleId = "vehicle_id"
        case typeId = "type_id"
        case startAddress = "start_address"
        case endAddress = "end_address"
        case _break = "break"
        case returnToDepot = "return_to_depot"
        case earliestStart = "earliest_start"
        case latestEnd = "latest_end"
        case skills
        case maxDistance = "max_distance"
        case maxDrivingTime = "max_driving_time"
        case maxJobs = "max_jobs"
        case maxActivities = "max_activities"
        case moveToEndAddress = "move_to_end_address"
    }

}
