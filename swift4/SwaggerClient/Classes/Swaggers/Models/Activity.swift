//
// Activity.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public struct Activity: Codable {

    public enum ModelType: String, Codable { 
        case start = "start"
        case end = "end"
        case service = "service"
        case pickupshipment = "pickupShipment"
        case delivershipment = "deliverShipment"
        case pickup = "pickup"
        case delivery = "delivery"
        case _break = "break"
    }    /** type of activity */
    public var type: ModelType?

    /** Id referring to the underlying service or shipment, i.e. the shipment or service this activity belongs to */
    public var _id: String?

    /** Id that refers to address */
    public var locationId: String?

    public var address: ResponseAddress?

    /** Arrival time at this activity in seconds. If type is &#x60;start&#x60;, this is not available (since it makes no sense to have &#x60;arr_time&#x60; at start). However, &#x60;end_time&#x60; is available and actually means \\\&quot;departure time\\\&quot; at start location. It is important to note that &#x60;arr_time&#x60; does not necessarily mean \\\&quot;start of underlying activity\\\&quot;, it solely means arrival time at activity location. If this activity has no time windows and if there are no further preparation times, &#x60;arr_time&#x60; is equal to activity start time. */
    public var arrTime: Int64?

    /** End time of and thus departure time at this activity. If type is &#x60;end&#x60;, this is not available (since it makes no sense to have an &#x60;end_time&#x60; at end) &#x60;end_time&#x60; at each activity is equal to the departure time at the activity location. */
    public var endTime: Int64?

    /** End date time with offset like this 1970-01-01T01:00+01:00. If you do not use time-dependent optimization, this is &#x60;null&#x60;. */
    public var endDateTime: Date?

    /** Arrival date time with offset like this 1970-01-01T01:00+01:00. If you do not use time-dependent optimization, this is &#x60;null&#x60;. */
    public var arrDateTime: Date?

    /** Waiting time at this activity in seconds. A waiting time can occur if the activity has at least one time window. If &#x60;arr_time&#x60; &lt; &#x60;time_window.earliest&#x60; a waiting time of &#x60;time_window_earliest&#x60; - &#x60;arr_time&#x60; occurs. */
    public var waitingTime: Int64?

    /** preparation time at this activity in seconds */
    public var preparationTime: Int64?

    /** cumulated distance from start to this activity in m */
    public var distance: Int64?

    /** driving time of driver in seconds */
    public var drivingTime: Int64?

    /** Array with size/capacity dimensions before this activity */
    public var loadBefore: [Int]?

    /** Array with size/capacity dimensions after this activity */
    public var loadAfter: [Int]?
    public init(type: ModelType?, _id: String?, locationId: String?, address: ResponseAddress?, arrTime: Int64?, endTime: Int64?, endDateTime: Date?, arrDateTime: Date?, waitingTime: Int64?, preparationTime: Int64?, distance: Int64?, drivingTime: Int64?, loadBefore: [Int]?, loadAfter: [Int]?) { 
        self.type = type
        self._id = _id
        self.locationId = locationId
        self.address = address
        self.arrTime = arrTime
        self.endTime = endTime
        self.endDateTime = endDateTime
        self.arrDateTime = arrDateTime
        self.waitingTime = waitingTime
        self.preparationTime = preparationTime
        self.distance = distance
        self.drivingTime = drivingTime
        self.loadBefore = loadBefore
        self.loadAfter = loadAfter
    }
    public enum CodingKeys: String, CodingKey { 
        case type
        case _id = "id"
        case locationId = "location_id"
        case address
        case arrTime = "arr_time"
        case endTime = "end_time"
        case endDateTime = "end_date_time"
        case arrDateTime = "arr_date_time"
        case waitingTime = "waiting_time"
        case preparationTime = "preparation_time"
        case distance
        case drivingTime = "driving_time"
        case loadBefore = "load_before"
        case loadAfter = "load_after"
    }

}
